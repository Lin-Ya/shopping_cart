package com.orrz.shopping_cart.User;import com.orrz.shopping_cart.User.model.User;import com.orrz.shopping_cart.User.model.UserDao;import com.orrz.shopping_cart.User.model.UserMockDao;import com.orrz.shopping_cart.User.view.GetUserResponse;import com.orrz.shopping_cart.User.view.UpdateUserRequest;import com.orrz.shopping_cart.User.view.UpdateUserResponse;import com.orrz.shopping_cart.User.view.create.CreateUserRequest;import com.orrz.shopping_cart.User.view.create.CreateUserResponse;import org.easymock.EasyMockSupport;import org.junit.Before;import org.junit.Test;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import static org.junit.Assert.assertEquals;/** * @Author: Lin_Ya * @Date: 2019-01-30-09:58 * @Version: 1.0 * @Description: 用户测试类 */public class UserControllerTest extends EasyMockSupport {    private final Long EXIST_ID = 1L;    private final Long NOT_FOUND_ID = 999L;    private UserDao userDao;    private UserController userController;    private User user;    private CreateUserRequest createUserRequest;    private UpdateUserRequest updateUserRequest;    @Before    public void setup() {        user = createStrictMock(User.class);        userDao = new UserMockDao();        userController = new UserController(userDao);        createUserRequest = new CreateUserRequest();        updateUserRequest = new UpdateUserRequest();    }    /**     * 测试获取用户 成功     */    @Test    public void shouldGetUserSuccess() {        // 取出用户        ResponseEntity<GetUserResponse> response = userController.getUser(EXIST_ID);        // 断言        assertEquals(HttpStatus.OK, response.getStatusCode());    }    /**     * 测试获取用户 失败     */    @Test    public void shouldGetUserFail() {        ResponseEntity<GetUserResponse> response = userController.getUser(NOT_FOUND_ID);        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());    }    /**     * 测试创建用户     */    @Test    public void shouldCreateUserSuccess() {        createUserRequest.setName("Test");        createUserRequest.setPhoneNumber("Test");        createUserRequest.setPassword("Test");        ResponseEntity<CreateUserResponse> response = userController.createUser(createUserRequest);        assertEquals("Test", response.getBody().getUser().getName());        assertEquals(HttpStatus.CREATED, response.getStatusCode());    }    /**     * 更新用户 成功     */    @Test    public void shouldUpdateUserSuccess() {        updateUserRequest.setName("Update");        updateUserRequest.setPassword("Update");        updateUserRequest.setPhoneNumber("Update");        ResponseEntity<UpdateUserResponse> response = userController.updateUser(EXIST_ID, updateUserRequest);        assertEquals(HttpStatus.OK, response.getStatusCode());    }    /**     * 更新用户 失败     */    @Test    public void shouldUpdateUserFail() {        updateUserRequest.setName("Update");        updateUserRequest.setPassword("Update");        updateUserRequest.setPhoneNumber("Update");        ResponseEntity<UpdateUserResponse> response = userController.updateUser(NOT_FOUND_ID, updateUserRequest);        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());    }    /**     * 删除用户 成功     */    @Test    public void shouldDeleteUserSuccess() {        ResponseEntity response = userController.delete(EXIST_ID);        assertEquals(HttpStatus.OK, response.getStatusCode());    }    /**     * 删除用户 失败     */    @Test    public void shouldDeleteUserFail() {        ResponseEntity response = userController.delete(NOT_FOUND_ID);        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());    }}