package com.orrz.shopping_cart.Product;import com.orrz.shopping_cart.Product.model.ProductDao;import com.orrz.shopping_cart.Product.model.ProductMockDao;import com.orrz.shopping_cart.Product.view.GetProductResponse;import com.orrz.shopping_cart.Product.view.ListProductsResponse;import com.orrz.shopping_cart.Product.view.UpdateProductRequest;import com.orrz.shopping_cart.Product.view.UpdateProductResponse;import com.orrz.shopping_cart.Product.view.create.CreateProductRequest;import com.orrz.shopping_cart.Product.view.create.CreateProductResponse;import org.junit.Before;import org.junit.Test;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import static org.junit.Assert.assertEquals;/** * @Author: Lin_Ya * @Date: 2019-01-31-11:36 * @Version: 1.0 * @Description: 商品测试类 */public class ProductControllerTest {    private final Long EXIST_ID = 1L;    private final Long NOT_FOUND_ID = 999L;    private ProductDao productDao;    private ProductController productController;    private CreateProductRequest createProductRequest;    private UpdateProductRequest updateProductRequest;    @Before    public void setUp() {        productDao = new ProductMockDao();        productController = new ProductController(productDao);        createProductRequest = new CreateProductRequest();        updateProductRequest = new UpdateProductRequest();    }    /**     * 测试获取商品 成功     */    @Test    public void shouldGetPrdouctSuccess() {        ResponseEntity<GetProductResponse> response = productController.getProduct(EXIST_ID);        assertEquals(HttpStatus.OK, response.getStatusCode());    }    /**     * 测试获取商品 失败     */    @Test    public void shouldGetProductFail() {        ResponseEntity response = productController.getProduct(NOT_FOUND_ID);        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());    }    /**     * 获取所有商品 成功     */    @Test    public void shouldGetAllProduct() {        ResponseEntity<ListProductsResponse> response = productController.getAllProducts();        assertEquals(HttpStatus.OK, response.getStatusCode());    }    /**     * 创建商品 成功     */    @Test    public void shouldCreateProducSuccess() {        createProductRequest.setName("Test");        createProductRequest.setDescription("Test");        createProductRequest.setPrice(1.2);        ResponseEntity<CreateProductResponse> response = productController.createProduct(createProductRequest);        assertEquals(HttpStatus.CREATED, response.getStatusCode());        assertEquals("Test", response.getBody().getProduct().getName());    }    /**     * 更新商品 成功     */    @Test    public void shouldUpdateProductSuccess() {        updateProductRequest.setName("Update");        updateProductRequest.setDescription("Update");        updateProductRequest.setPrice(9.9);        updateProductRequest.setId(EXIST_ID);        ResponseEntity<UpdateProductResponse> response = productController.updateProduct(EXIST_ID, updateProductRequest);        assertEquals(HttpStatus.OK, response.getStatusCode());    }    /**     * 更新商品 失败     */    @Test    public void shouldUpdateProductFail() {        updateProductRequest.setName("Update");        updateProductRequest.setDescription("Update");        updateProductRequest.setPrice(9.9);        updateProductRequest.setId(NOT_FOUND_ID);        ResponseEntity<UpdateProductResponse> response = productController.updateProduct(NOT_FOUND_ID, updateProductRequest);        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());    }    /**     * 删除商品 成功     */    @Test    public void shouldDeleteProductSuccess() {        ResponseEntity response = productController.deleteProduct(EXIST_ID);        assertEquals(HttpStatus.OK, response.getStatusCode());    }    /**     * 删除商品 失败     */    @Test    public void shouldDeleteProductFail() {        ResponseEntity response = productController.deleteProduct(NOT_FOUND_ID);        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());    }}