package com.orrz.shopping_cart.Cart;import com.orrz.shopping_cart.Cart.model.CartItem;import com.orrz.shopping_cart.Cart.model.CartItemDao;import com.orrz.shopping_cart.Cart.view.GetCartItemResponse;import com.orrz.shopping_cart.Cart.view.ListCartItemResponse;import com.orrz.shopping_cart.Cart.view.UpdateCartItemRequest;import com.orrz.shopping_cart.Cart.view.UpdateCartItemResponse;import com.orrz.shopping_cart.Cart.view.create.CreateCartItemRequest;import com.orrz.shopping_cart.Cart.view.create.CreateCartItemResponse;import com.orrz.shopping_cart.Product.model.Product;import com.orrz.shopping_cart.Product.model.ProductDao;import com.orrz.shopping_cart.User.model.User;import com.orrz.shopping_cart.User.model.UserDao;import com.orrz.shopping_cart.User.view.UserView;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.util.List;/** * @Author: Lin_Ya * @Date: 2019-01-31-16:08 * @Version: 1.0 * @Description: 购物车控制器 */@RestControllerpublic class CartController {    private CartItemDao cartItemDao;    private UserDao userDao;    private ProductDao productDao;    // Spring 会帮我注入依赖的不是吗？前提是记得标记 Component 或者使用了工厂模式    public CartController(CartItemDao cartItemDao, UserDao userDao, ProductDao productDao) {        this.cartItemDao = cartItemDao;        this.userDao = userDao;        this.productDao = productDao;    }    /**     * 根据id获取指定购物车条目     *     * @param cartItemId     * @return     */    @GetMapping("/cartItems/{cartItemId}")    public ResponseEntity<GetCartItemResponse> getById(@PathVariable Long cartItemId) {        CartItem cartItem = cartItemDao.getById(cartItemId);        if (cartItem == null) {            return new ResponseEntity<>(HttpStatus.NOT_FOUND);        } else {            return new ResponseEntity<>(new GetCartItemResponse(cartItem), HttpStatus.OK);        }    }    /**     * 获取全部购物车条目     *     * @return     */    @GetMapping("/cartItems")    public ResponseEntity<ListCartItemResponse> getAllCartItems() {        List<CartItem> cartItems = cartItemDao.findAll();        return new ResponseEntity<>(new ListCartItemResponse(cartItems), HttpStatus.OK);    }    /**     * 创建购物车条目     *     * @param createCartItemRequest     * @return     */    @PostMapping("/cartItems")    public ResponseEntity<CreateCartItemResponse> createCartItem(@RequestBody CreateCartItemRequest createCartItemRequest) {        User userTarget = userDao.getById(createCartItemRequest.getUserId());        UserView user = new UserView(userTarget);        Product product = productDao.getById(createCartItemRequest.getProductId());        Long quantity = createCartItemRequest.getQuantity();        CartItem cartItem = cartItemDao.save(new CartItem(user, product, quantity));        return new ResponseEntity<>(new CreateCartItemResponse(cartItem), HttpStatus.CREATED);    }    /**     * 更新购物车条目的数量     *     * @param cartItemId     * @param updateCartItemRequest     * @return     */    @PutMapping("/cartItems/{cartItemId}")    public ResponseEntity<UpdateCartItemResponse> updateCartItem(@PathVariable long cartItemId, @RequestBody UpdateCartItemRequest updateCartItemRequest) {        CartItem cartItem = cartItemDao.getById(cartItemId);        if (cartItem == null) {            return new ResponseEntity<>(HttpStatus.NOT_FOUND);        }        cartItem.setQuantity(updateCartItemRequest.getQuantity());        cartItem = cartItemDao.save(cartItem);        return new ResponseEntity<>(new UpdateCartItemResponse(cartItem), HttpStatus.OK);    }    @DeleteMapping("/cartItems/{cartItemId}")    public ResponseEntity deleteCartItem(@PathVariable long cartItemId) {        Boolean flag = cartItemDao.delete(cartItemId);        if (!flag) {            return new ResponseEntity(HttpStatus.NOT_FOUND);        } else {            return new ResponseEntity(HttpStatus.OK);        }    }}