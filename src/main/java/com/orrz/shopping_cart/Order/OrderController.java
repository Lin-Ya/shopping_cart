package com.orrz.shopping_cart.Order;import com.orrz.shopping_cart.Order.model.Order;import com.orrz.shopping_cart.Order.model.OrderDao;import com.orrz.shopping_cart.Order.view.GetOrderResponse;import com.orrz.shopping_cart.Order.view.ListOrderResponse;import com.orrz.shopping_cart.Order.view.UpdateOrderResponse;import com.orrz.shopping_cart.Order.view.UpdateOrderResquest;import com.orrz.shopping_cart.Order.view.create.CreateOrderRequest;import com.orrz.shopping_cart.Order.view.create.CreateOrderResponse;import com.orrz.shopping_cart.Order.view.create.CreateOrderValidator;import com.orrz.shopping_cart.Product.model.Product;import com.orrz.shopping_cart.Product.model.ProductDao;import com.orrz.shopping_cart.User.model.User;import com.orrz.shopping_cart.User.model.UserDao;import com.orrz.shopping_cart.User.view.UserView;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.util.List;/** * @Author: Lin_Ya * @Date: 2019-02-01-16:14 * @Version: 1.0 * @Description: 订单控制器 */@RestControllerpublic class OrderController {    private OrderDao orderDao;    private UserDao userDao;    private ProductDao productDao;    private CreateOrderValidator createOrderValidator;    public OrderController(OrderDao orderDao, UserDao userDao, ProductDao productDao, CreateOrderValidator createOrderValidator) {        this.orderDao = orderDao;        this.userDao = userDao;        this.productDao = productDao;        this.createOrderValidator = createOrderValidator;    }    /**     * 获取单个订单     *     * @param orderId     * @return     */    @GetMapping("/orders/{orderId}")    public ResponseEntity<GetOrderResponse> getOrder(@PathVariable long orderId) {        Order order = orderDao.getById(orderId);        if (order == null) {            return new ResponseEntity<>(HttpStatus.NOT_FOUND);        } else {            return new ResponseEntity<>(new GetOrderResponse(order), HttpStatus.OK);        }    }    /**     * 返回所有订单     *     * @return     */    @GetMapping("/orders")    public ResponseEntity<ListOrderResponse> getAllOrder() {        List<Order> orders = orderDao.findAll();        return new ResponseEntity<>(new ListOrderResponse(orders), HttpStatus.OK);    }    /**     * 创建 订单     *     * @param createOrderRequest     * @return     */    @PostMapping("/orders")    public ResponseEntity<CreateOrderResponse> createOrder(@RequestBody CreateOrderRequest createOrderRequest) {        boolean flag = createOrderValidator.validate(createOrderRequest);        if (!flag) {            return new ResponseEntity<>(HttpStatus.FORBIDDEN);        }        User user = userDao.getById(createOrderRequest.getUserId());        UserView userView = new UserView(user);        Product product = productDao.getById(createOrderRequest.getProductId());        long quantity = createOrderRequest.getQuantity();        String address = createOrderRequest.getAddress();//        String status = createOrderRequest.getStatus();        // 创建订单的状态都是 待确认        String status = "待确认";        Order order = new Order(userView, quantity, product, status, address);        order = orderDao.save(order);        return new ResponseEntity<>(new CreateOrderResponse(order), HttpStatus.CREATED);    }    /**     * 更新订单     *     * @param orderId     * @param updateOrderRequest     * @return     */    @PutMapping("/orders/{orderId}")    public ResponseEntity<UpdateOrderResponse> updateOrder(@PathVariable long orderId, @RequestBody UpdateOrderResquest updateOrderRequest) {        Order order = orderDao.getById(orderId);        if (order == null) {            return new ResponseEntity<>(HttpStatus.NOT_FOUND);        }        order.setAddress(updateOrderRequest.getAddress());        order.setQuantity(updateOrderRequest.getQuantity());        order.setStatus(updateOrderRequest.getStatus());        order = orderDao.save(order);        return new ResponseEntity<>(new UpdateOrderResponse(order), HttpStatus.OK);    }    /**     * 删除订单     *     * @param orderId     * @return     */    @DeleteMapping("/orders/{orderId}")    public ResponseEntity deleteOrder(@PathVariable long orderId) {        Order order = orderDao.getById(orderId);        if (order == null) {            return new ResponseEntity(HttpStatus.NOT_FOUND);        }        // 要考虑，当订单状态已经变成 配送中，能否删除订单？        orderDao.delete(orderId);        return new ResponseEntity(HttpStatus.OK);    }}