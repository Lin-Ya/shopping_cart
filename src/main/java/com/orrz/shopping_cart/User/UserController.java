package com.orrz.shopping_cart.User;import com.orrz.shopping_cart.User.model.User;import com.orrz.shopping_cart.User.model.UserDao;import com.orrz.shopping_cart.User.view.*;import com.orrz.shopping_cart.User.view.create.CreateUserRequest;import com.orrz.shopping_cart.User.view.create.CreateUserResponse;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.util.ArrayList;import java.util.List;/** * @Author: Lin_Ya * @Date: 2019-01-29-11:43 * @Version: 1.0 * @Description: 用户控制器 */@RestControllerpublic class UserController {    private UserDao userDao;    // 通过构造函数注入所需要依赖的实例    public UserController(UserDao userDao) {        this.userDao = userDao;    }    /**     * 根据 userId 获取用户     *     * @param userId     * @return user     */    @GetMapping("/users/{userId}")    public ResponseEntity<GetUserResponse> getUser(@PathVariable long userId) {        User user = userDao.getById(userId);        if (user == null) {            return new ResponseEntity<>(HttpStatus.NOT_FOUND);        } else {            UserView userView = new UserView(user);            return new ResponseEntity<>(new GetUserResponse(userView), HttpStatus.OK);        }    }    /**     * 获取所有用户     *     * @return     */    @GetMapping("/users")    public ResponseEntity<ListUserResponse> getUsers() {        List<User> userList = userDao.findAll();        if (userList.size() < 1) {            return new ResponseEntity<>(HttpStatus.OK);        }        List<UserView> users = new ArrayList<UserView>();        for (User user : userList) {            users.add(new UserView(user));        }        return new ResponseEntity<>(new ListUserResponse(users), HttpStatus.OK);    }    /**     * 创建用户     *     * @return CreateUserResponse     */    @PostMapping("/users")    public ResponseEntity<CreateUserResponse> createUser(@RequestBody CreateUserRequest createUserRequest) {        User user = new User(                createUserRequest.getName(), createUserRequest.getPassword(), createUserRequest.getPassword());        user = userDao.save(user);        return new ResponseEntity<>(new CreateUserResponse(new UserView(user)), HttpStatus.CREATED);    }    /**     * 更新用户     *     * @param userId     * @param updateUserRequest     * @return     */    @PutMapping("/users/{userId}")    public ResponseEntity<UpdateUserResponse> updateUser(@PathVariable long userId, @RequestBody UpdateUserRequest updateUserRequest) {        User user = new User(                updateUserRequest.getName(), updateUserRequest.getPassword(), updateUserRequest.getPhoneNumber());        user.setId(userId);        user = userDao.update(userId, user);        if (user == null) {            return new ResponseEntity<>(HttpStatus.NOT_FOUND);        } else {            return new ResponseEntity<>(new UpdateUserResponse(new UserView(user)), HttpStatus.OK);        }    }    /**     * 删除用户     *     * @param userId     * @return     */    @DeleteMapping("/users/{userId}")    public ResponseEntity delete(@PathVariable long userId) {        Boolean flag = userDao.delete(userId);        if (flag) {            return new ResponseEntity(HttpStatus.OK);        } else {            return new ResponseEntity(HttpStatus.NOT_FOUND);        }    }}