package com.orrz.shopping_cart.User.model;import org.springframework.stereotype.Component;import java.util.ArrayList;import java.util.HashMap;import java.util.List;/** * @Author: Lin_Ya * @Date: 2019-01-29-15:03 * @Version: 1.0 * @Description: UserDao 的实现类，可以根据不同的数据库有不同的实现类，但主要的接口都在 UserDao 抽象好了的 */@Component("UserDao")public class UserMockDao implements UserDao {    private HashMap<Long, User> users = new HashMap<>();    public UserMockDao() {        User kevin = new User("kevin", "kevin", "12306");        kevin.setId(1L);        users.put(1L, kevin);        User jack = new User("jack", "jack", "12306");        jack.setId(2L);        users.put(2L, jack);        User police = new User("police", "police", "110");        police.setId(3L);        users.put(3L, police);        User doctor = new User("doctor", "doctor", "120");        doctor.setId(4L);        users.put(4L, doctor);    }    /**     * 根据 id 获取用户     *     * @param id     * @return User     */    @Override    public User getById(long id) {        // 获取id 或者默认返回null        return users.getOrDefault(id, null);    }    /**     * 获取所有用户     *     * @return List 用户数组     */    @Override    public List<User> findAll() {        return new ArrayList<User>(users.values());    }    /**     * 新建用户，此时的 user 是没有id 的     * 所以先更新一个id     *     * @param user     * @return user     */    @Override    public User save(User user) {        long id = (long) (users.size() + 1);        while (users.containsKey(id)) {            id = id + 1L;        }        user.setId(id);        users.put(id, user);        User newUser = users.get(id);        return newUser;    }    /**     * 更新用户     *     * @param id     * @param user     * @return user     */    @Override    public User update(long id, User user) {        if (users.containsKey(id)) {            users.put(id, user);            return users.get(id);        } else {            return null;        }    }    /**     * 删除用户     *     * @param id     */    @Override    public Boolean delete(long id) {        if (users.containsKey(id)) {            users.remove(id);            return true;        } else {            return false;        }    }}