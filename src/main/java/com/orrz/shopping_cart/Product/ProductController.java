package com.orrz.shopping_cart.Product;import com.orrz.shopping_cart.Product.model.Product;import com.orrz.shopping_cart.Product.model.ProductDao;import com.orrz.shopping_cart.Product.view.GetProductResponse;import com.orrz.shopping_cart.Product.view.ListProductsResponse;import com.orrz.shopping_cart.Product.view.UpdateProductRequest;import com.orrz.shopping_cart.Product.view.UpdateProductResponse;import com.orrz.shopping_cart.Product.view.create.CreateProductRequest;import com.orrz.shopping_cart.Product.view.create.CreateProductResponse;import com.orrz.shopping_cart.User.view.create.CreateUserRequest;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.util.List;/** * @Author: Lin_Ya * @Date: 2019-01-31-09:04 * @Version: 1.0 * @Description: 产品控制器 */@RestControllerpublic class ProductController {    private ProductDao productDao;    /**     * 构造函数，Spring 会自动注入依赖（需要给ProductMockDao标记为 Component！）     *     * @param productDao     */    public ProductController(ProductDao productDao) {        this.productDao = productDao;    }    /**     * 获取全部商品     *     * @return ListProductsResponse     */    @GetMapping("/products")    public ResponseEntity<ListProductsResponse> getAllProducts() {        List<Product> products = productDao.findAll();        if (products == null) {            return new ResponseEntity<>(HttpStatus.NOT_FOUND);        } else {            return new ResponseEntity<>(new ListProductsResponse(products), HttpStatus.OK);        }    }    /**     * 获取单个商品     *     * @param productId     * @return GetProductResponse     */    @GetMapping("/products/{productId}")    public ResponseEntity<GetProductResponse> getProduct(@PathVariable long productId) {        Product product = productDao.getById(productId);        if (product == null) {            return new ResponseEntity<>(HttpStatus.NOT_FOUND);        } else {            return new ResponseEntity<>(new GetProductResponse(product), HttpStatus.OK);        }    }    /**     * 创建新的商品     *     * @param createProductRequest     * @return CreateProductResponse     */    @PostMapping("/products")    public ResponseEntity<CreateProductResponse> createProduct(@RequestBody CreateProductRequest createProductRequest) {        Product product = new Product(                createProductRequest.getName(), createProductRequest.getDescription(), createProductRequest.getPrice());        product = productDao.save(product);        return new ResponseEntity<>(new CreateProductResponse(product), HttpStatus.CREATED);    }    /**     * 更新商品     *     * @param productId     * @param updateProductRequest     * @return     */    @PutMapping("/products/{productId}")    public ResponseEntity<UpdateProductResponse> updateProduct(@PathVariable long productId, @RequestBody UpdateProductRequest updateProductRequest) {        Product product = new Product(                updateProductRequest.getName(), updateProductRequest.getDescription(), updateProductRequest.getPrice());        product.setId(productId);        product = productDao.update(productId, product);        if (product == null) {            return new ResponseEntity<>(HttpStatus.NOT_FOUND);        } else {            return new ResponseEntity<>(new UpdateProductResponse(product), HttpStatus.OK);        }    }    /**     * 删除商品     *     * @param productId     * @return     */    @DeleteMapping("/products/{productId}")    public ResponseEntity deleteProduct(@PathVariable long productId) {        Boolean flag = productDao.delete(productId);        if (flag) {            return new ResponseEntity(HttpStatus.OK);        } else {            return new ResponseEntity(HttpStatus.NOT_FOUND);        }    }}